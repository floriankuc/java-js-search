/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.Person;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-05-30T16:27:00.798725+02:00[Europe/Berlin]", comments = "Generator version: 7.6.0")
@Validated
@Tag(name = "personen", description = "the personen API")
public interface PersonenApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /personen : Liefert zu Suchkriterien passende Personen
     *
     * @param vorname  (optional)
     * @param nachname  (optional)
     * @param iban  (optional)
     * @param email  (optional)
     * @return Alles erfolgreich (status code 200)
     *         or Mindestens ein Parameter darf nicht null sein (status code 400)
     */
    @Operation(
        operationId = "readPersonenBySearchParams",
        summary = "Liefert zu Suchkriterien passende Personen",
        responses = {
            @ApiResponse(responseCode = "200", description = "Alles erfolgreich", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Person.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Mindestens ein Parameter darf nicht null sein")
        },
        security = {
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/personen",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<Person>> readPersonenBySearchParams(
        @Parameter(name = "vorname", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "vorname", required = false) String vorname,
        @Parameter(name = "nachname", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "nachname", required = false) String nachname,
        @Parameter(name = "iban", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "iban", required = false) String iban,
        @Parameter(name = "email", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "email", required = false) String email
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"kommunikationsadressen\" : [ { \"telefon\" : \"telefon\", \"id\" : 1, \"email\" : \"email\" }, { \"telefon\" : \"telefon\", \"id\" : 1, \"email\" : \"email\" } ], \"vorname\" : \"vorname\", \"nachname\" : \"nachname\", \"geschlecht\" : \"u\", \"anschriften\" : [ { \"ort\" : \"ort\", \"strasse\" : \"strasse\", \"hausnummer\" : \"hausnummer\", \"land\" : \"land\", \"id\" : 6, \"plz\" : \"plz\" }, { \"ort\" : \"ort\", \"strasse\" : \"strasse\", \"hausnummer\" : \"hausnummer\", \"land\" : \"land\", \"id\" : 6, \"plz\" : \"plz\" } ], \"id\" : 0, \"bankverbindungen\" : [ { \"kontonummer\" : \"kontonummer\", \"bankleitzahl\" : \"bankleitzahl\", \"iban\" : \"iban\", \"land\" : \"land\", \"id\" : 5, \"bankname\" : \"bankname\", \"bic\" : \"bic\" }, { \"kontonummer\" : \"kontonummer\", \"bankleitzahl\" : \"bankleitzahl\", \"iban\" : \"iban\", \"land\" : \"land\", \"id\" : 5, \"bankname\" : \"bankname\", \"bic\" : \"bic\" } ] }, { \"kommunikationsadressen\" : [ { \"telefon\" : \"telefon\", \"id\" : 1, \"email\" : \"email\" }, { \"telefon\" : \"telefon\", \"id\" : 1, \"email\" : \"email\" } ], \"vorname\" : \"vorname\", \"nachname\" : \"nachname\", \"geschlecht\" : \"u\", \"anschriften\" : [ { \"ort\" : \"ort\", \"strasse\" : \"strasse\", \"hausnummer\" : \"hausnummer\", \"land\" : \"land\", \"id\" : 6, \"plz\" : \"plz\" }, { \"ort\" : \"ort\", \"strasse\" : \"strasse\", \"hausnummer\" : \"hausnummer\", \"land\" : \"land\", \"id\" : 6, \"plz\" : \"plz\" } ], \"id\" : 0, \"bankverbindungen\" : [ { \"kontonummer\" : \"kontonummer\", \"bankleitzahl\" : \"bankleitzahl\", \"iban\" : \"iban\", \"land\" : \"land\", \"id\" : 5, \"bankname\" : \"bankname\", \"bic\" : \"bic\" }, { \"kontonummer\" : \"kontonummer\", \"bankleitzahl\" : \"bankleitzahl\", \"iban\" : \"iban\", \"land\" : \"land\", \"id\" : 5, \"bankname\" : \"bankname\", \"bic\" : \"bic\" } ] } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
